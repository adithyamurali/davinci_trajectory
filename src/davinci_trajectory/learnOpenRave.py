import IPython
import tfx

"""Shows how to get all 6D IK solutions.
"""
from openravepy import *
import numpy, time
env = Environment() # create the environment
env.SetViewer('qtcoin') # start the viewer
env.Load('myDavinci.xml') # load a scene
robot = env.GetRobots()[0] # get the first robot

manip = robot.SetActiveManipulator('left_arm') # set the manipulator to leftarm
ikmodel = databases.inversekinematics.InverseKinematicsModel(robot,iktype=IkParameterization.Type.Transform6D)
# IPython.embed()
if not ikmodel.load():
    ikmodel.autogenerate()

print "IK model autogenerated"

with env: # lock environment
    Tgoal_1 = numpy.array([[0,-1,0,-0.21],[-1,0,0,0.04],[0,0,-1,0.92],[0,0,0,1]])

    Tgoal_2 = numpy.array([[0,-1,0,0],[-1,0,0,0],[0,0,-1,0],[0,0,0,1]])

    #This is home pose in frame two_remote_center_link
    Tgoal_3 = numpy.array([[ 0.14136896, -0.74493114,  0.65199111,  0.08110923],
        [-0.97117479, -0.23204392, -0.05454487,  0.01908207],
        [ 0.19192274, -0.62548638, -0.75626215, -0.07564649],
        [ 0.        ,  0.        ,  0.        ,  1.        ]])

    Tgoal_4 = numpy.array([[-0.14136896,  0.74493114, -0.65199111,  0.16889077],
        [ 0.97117479,  0.23204392,  0.05454487, -0.01908207],
        [ 0.19192274, -0.62548638, -0.75626215, -0.57564649],
        [ 0.        ,  0.        ,  0.        ,  1.        ]])

    goal_5_pose = tfx.pose(manip.GetEndEffectorTransform())
    goal_5_pose.position.y += .0001
    Tgoal_5 = numpy.array(goal_5_pose.matrix)

    sol = manip.FindIKSolution(Tgoal_5, IkFilterOptions.CheckEnvCollisions) # get collision-free solution
    print sol, Tgoal_5
    with robot: # save robot state
        robot.SetDOFValues(sol,manip.GetArmIndices()) # set the current solution
        Tee = manip.GetEndEffectorTransform()
        env.UpdatePublishedBodies() # allow viewer to update new robot
        time.sleep(10)
    
    raveLogInfo('Tee is: '+repr(Tee))


# """Use a planner to get a collision free path to a workspace goal of the end effector.
# """
# from openravepy import *
# import numpy
# env = Environment() # create the environment
# env.SetViewer('qtcoin') # start the viewer
# env.Load('data/pr2test1.env.xml') # load a scene
# robot = env.GetRobots()[0] # get the first robot

# robot.SetActiveManipulator('leftarm_torso') # set the manipulator to leftarm + torso
# ikmodel = databases.inversekinematics.InverseKinematicsModel(robot,iktype=IkParameterization.Type.Transform6D)
# if not ikmodel.load():
#     ikmodel.autogenerate()

# manipprob = interfaces.BaseManipulation(robot) # create the interface for basic manipulation programs
# Tgoal = numpy.array([[0,-1,0,-0.21],[-1,0,0,0.04],[0,0,-1,0.92],[0,0,0,1]])
# res = manipprob.MoveToHandPosition(matrices=[Tgoal],seedik=10) # call motion planner with goal joint angles
# robot.WaitForController(0) # wait


# """Launch a planner directly by creating its interface and configuring the PlannerParameters structures.
# """
# from openravepy import *
# from numpy import pi
# env = Environment() # create openrave environment
# env.SetViewer('qtcoin')
# env.Load('data/lab1.env.xml')
# robot = env.GetRobots()[0]

# robot.SetActiveDOFs(range(4)) # set joints the first 4 dofs
# params = Planner.PlannerParameters()
# params.SetRobotActiveJoints(robot)
# params.SetGoalConfig([0,pi/2,pi/2,pi/2]) # set goal to all ones
# # forces parabolic planning with 40 iterations
# params.SetExtraParameters("""<_postprocessing planner="parabolicsmoother">
#     <_nmaxiterations>40</_nmaxiterations>
# </_postprocessing>""")

# planner=RaveCreatePlanner(env,'birrt')
# planner.InitPlan(robot, params)

# traj = RaveCreateTrajectory(env,'')
# planner.PlanPath(traj)

# for i in range(traj.GetNumWaypoints()):
#     # get the waypoint values, this holds velocites, time stamps, etc
#     data=traj.GetWaypoint(i)
#     # extract the robot joint values only
#     dofvalues = traj.GetConfigurationSpecification().ExtractJointValues(data,robot,robot.GetActiveDOFIndices())
#     raveLogInfo('waypint %d is %s'%(i,dofvalues))